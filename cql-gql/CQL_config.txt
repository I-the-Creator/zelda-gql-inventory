CQL - Cassandra Query Language

DESC KEYSPACES; - to show all keyspaces in current DB

USE <keyspace_name>; - to make <keyspace> active derictory

create table 'objects' with rows and columns:

CREATE TABLE IF NOT EXISTS objects (
	... object_id UUID PRIMARY KEY,   - create data set (column) <object_id> (any name as you wish) with CQL data type UUID(uniq ID) and PRIMARY KEY -  we only want to search for rows by the object_id
	... name TEXT,     - name of the object, data type - TEXT
	... description TEXT, - object description, data type TEXT
	... image TEXT - image url, data type TEXT
	... value_in_rupees INT, - value, data type INT (integer)
	... weight INT,
	... type TEXT,   - type of object
	... stackable BOOLEAN, - stackable or not (ex. object goes with an other object then 'true')
	... special MAP<TEXT,INT>); -  MAP type relates one item to another with a key value pair, for eack key only one value may exist and duplicates can't be stored and define types for key and value

CREATE TABLE IF NOT EXISTS characters (
	... character_id UUID PRIMARY KEY,
	... name TEXT,
	... stamina INT,
	... speed INT,
	... max_health INT,
 	... current_health INT,
	... weapon_slot UUID - take uniq IDs of objects that we are going to store in our 'objects' table
	... shield_slot UUID); - take uniq IDs of objects that we are going to store in our 'objects' table

CREATE CUSTOM INDEX IF NOT EXISTS character_nam_idx ON characters (name)     - create index of names from 'characters' table and its 'name' column
	... USING 'StorageAttachedIndex'
	... WITH OPTIONS = {'case_sensitive': 'false', 'normalize': 'true', 'ascii': 'true'}; - https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/cql_commands/cqlCreateCustomIndex.html


CREATE TABLE IF NOT EXISTS inventory (
	... character_id UUID,
	... object_id UUID,
	... object_category TEXT,
	... weight INT,
	... qty INT,
	... PRIMARY KEY (character_id, qty)) WITH CLUSTERING ORDER BY (qty ASC);    - define primary keys and claster by 'qty' in ascending order

CLEAR - to clear CQL console



Create objects:

INSERT INTO objects (object_id, name, description, image, value_in_rupees, weight, type, stackable, special)   - insert value to table
	... VALUES(uuid(), 'Boko Shield', 'Found close to the bue Bokoblins, protects you from attack.', 'https://www.zeldadungeon.net/wiki/images/5/54/Boko-shield.png', 8, 1, 'shield', false, {'durability' : 7});

INSERT INTO objects (object_id, name, description, image, value_in_rupees, weight, type, stackable, special)   - insert value to table
	... VALUES(uuid(), 'Travelers Sword', 'Found in the Great Plateau, dropped by Bokoblins.', 'https://www.zeldadungeon.net/wiki/images/7/7b/Travelers-sword.png', 10, 1, 'sword', false, {'durability' : 7, 'damage' : 5 });

INSERT INTO objects (object_id, name, description, image, value_in_rupees, weight, type, stackable, special)   - insert value to table
	... VALUES(uuid(), 'Apple', 'Found on trees o–∫ barrels, restores half of heart.', 'https://www.zeldadungeon.net/wiki/images/c/c3/Apple-botw.png', 2, 1, 'consumable', true, {'health' : 1 });

INSERT INTO objects (object_id, name, description, image, value_in_rupees, weight, type, stackable, special)   - insert value to table
	... VALUES(uuid(), 'Korok Seeds', 'Used to increase inventory squares.', 'https://www.zeldadungeon.net/wiki/images/0/01/Korok_Seed_-_HWAoC.png', 1, 0, 'item', true, {'max_inventory_squares_plus' : 1 });

SELECT * FROM objects;   -  to see the table



Create characters:

INSERT INTO characters (character_id, name, stamina, speed, max_health, current_health, weapon_slot, shield_slot)
	... VALUES(11111111-1111-1111-1111-111111111111, 'Cedrick', 10, 1, 6, 6, ad19d6fb-8992-4191-9357-0630a1dd5ed1, d8af93bd-31af-4ba1-a9d4-e646ef1f9960);

INSERT INTO characters (character_id, name, stamina, speed, max_health, current_health, weapon_slot, shield_slot) VALUES(22222222-2222-2222-2222-222222222222, 'Andrew', 10, 1, 8, 10, ad19d6fb-8992-4191-9357-0630a1dd5ed1, d8af93bd-31af-4ba1-a9d4-e646ef1f9960);

INSERT INTO characters (character_id, name, stamina, speed, max_health, current_health, weapon_slot, shield_slot) VALUES(33333333-3333-3333-3333-333333333333, 'Aaron', 10, 1, 6, 6, ad19d6fb-8992-4191-9357-0630a1dd5ed1, d8af93bd-31af-4ba1-a9d4-e646ef1f9960);

SELECT * FROM characters; 



Create Inventory:

INSERT INTO inventory (character_id, object_id, object_category, weight, qty) VALUES(22222222-2222-2222-2222-222222222222, af51b055-4265-4242-98e4-e48b53b2f0c1, 'Apple', 2, 10);
INSERT INTO inventory (character_id, object_id, object_category, weight, qty) VALUES(22222222-2222-2222-2222-222222222222, ad19d6fb-8992-4191-9357-0630a1dd5ed1, 'Sword', 2, 8);
INSERT INTO inventory (character_id, object_id, object_category, weight, qty) VALUES(22222222-2222-2222-2222-222222222222, ad19d6fb-8992-4191-9357-0630a1dd5eb1, 'Sword', 2, 7);

 

SELECT * FROM inventory; 


Delete Table from DB:
 
DROP TABLE <table_name> 




Connect GQL to CQL:

Go to DB 'Connect' -> Graph QL  tab and generate App Token  (for current role)
Client secret: Ogs_kQdZ-mn0J5-Rsv3ClQZsZZ2st9yWFOJYTmh-sI_gugfS6YvfJySy.xUvo2O.vYmKl7,dgCKMLA_Yh1uhKR.-CKMsOGhcUZGR1egzIr0wT24UyiRWxMnIt77JLltl
Token: AstraCS:evvzPNSKGyZxZbTacDeYYhgj:49fea693c118975d8ca1fa45ce52ef3315308aedb2a6857349910f8a63daa0fa

Open the GQL playground, under 'HTTP HEADERS' tab put insert to Token
Copy 'endpoint' URL from GraphQL Connection Page and insert it in address bar in playground, hit 'Play', check out the DOCS